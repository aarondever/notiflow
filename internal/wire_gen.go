// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/aarondever/notiflow/internal/config"
	"github.com/aarondever/notiflow/internal/database"
	"github.com/aarondever/notiflow/internal/handlers"
	"github.com/aarondever/notiflow/internal/services"
	"github.com/aarondever/notiflow/proto/email"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

// InitializeApp uses Wire to initialize all dependencies
func InitializeApp(cfg *config.Config) (*App, error) {
	databaseDatabase, err := database.NewDatabase(cfg)
	if err != nil {
		return nil, err
	}
	emailService := services.NewEmailService(databaseDatabase, cfg)
	emailHandler := handlers.NewEmailHandler(emailService)
	emailGRPCHandler := handlers.NewEmailGRPCHandler(emailService)
	app := NewApp(databaseDatabase, emailHandler, emailGRPCHandler)
	return app, nil
}

// wire.go:

// App holds all application dependencies
type App struct {
	Router     *gin.Engine
	GRPCServer *grpc.Server
	DB         *database.Database
}

func NewApp(
	db *database.Database,
	emailHandler *handlers.EmailHandler,
	emailGRPCHandler *handlers.EmailGRPCHandler,

) *App {

	router := gin.Default()
	emailHandler.RegisterRouter(router)

	grpcSrv := grpc.NewServer()
	email.RegisterEmailServiceServer(grpcSrv, emailGRPCHandler)

	return &App{
		DB:         db,
		Router:     router,
		GRPCServer: grpcSrv,
	}
}
